// –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã estimates –∏ email –ø–æ–ª–µ–π
// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É EmailJS - –æ–Ω–∞ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –Ω–∞—à—É –ø—Ä–æ–≤–µ—Ä–∫—É

async function detailedEmailCheck() {
  console.clear();
  console.log('üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ email –≤ —Å–∏—Å—Ç–µ–º–µ...\n');
  
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä estimate
    const { data: estimate, error: estError } = await window.supabase
      .from('estimates')
      .select('*')
      .limit(1)
      .single();
      
    if (estError) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è estimate:', estError);
      return;
    }
    
    console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ estimate:');
    console.log('–ü–æ–ª—è —Å –≤–æ–∑–º–æ–∂–Ω—ã–º email:');
    console.log('- client_email:', estimate.client_email);
    console.log('- email:', estimate.email);
    console.log('- client_id:', estimate.client_id);
    console.log('- job_id:', estimate.job_id);
    console.log('- client_name:', estimate.client_name);
    
    // 2. –ï—Å–ª–∏ –µ—Å—Ç—å client_id, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    if (estimate.client_id) {
      const { data: client } = await window.supabase
        .from('clients')
        .select('*')
        .eq('id', estimate.client_id)
        .single();
        
      if (client) {
        console.log('\nüë§ –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:');
        console.log('- name:', client.name);
        console.log('- email:', client.email);
        console.log('- phone:', client.phone);
      }
    }
    
    // 3. –ï—Å–ª–∏ –µ—Å—Ç—å job_id, –ø—Ä–æ–≤–µ—Ä—è–µ–º job
    if (estimate.job_id) {
      const { data: job } = await window.supabase
        .from('jobs')
        .select('*, clients(*)')
        .eq('id', estimate.job_id)
        .single();
        
      if (job) {
        console.log('\nüíº –î–∞–Ω–Ω—ã–µ job:');
        console.log('- client_id:', job.client_id);
        if (job.clients) {
          console.log('- client name:', job.clients.name);
          console.log('- client email:', job.clients.email);
        }
      }
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ estimates
    const { data: allEstimates } = await window.supabase
      .from('estimates')
      .select('id, client_email, email, client_id')
      .limit(20);
      
    if (allEstimates) {
      const withClientEmail = allEstimates.filter(e => e.client_email).length;
      const withEmail = allEstimates.filter(e => e.email).length;
      const withClientId = allEstimates.filter(e => e.client_id).length;
      const withAnyEmail = allEstimates.filter(e => e.client_email || e.email).length;
      
      console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ estimates (–ø–µ—Ä–≤—ã–µ 20):');
      console.log(`- –° client_email: ${withClientEmail}`);
      console.log(`- –° email: ${withEmail}`);
      console.log(`- –° client_id: ${withClientId}`);
      console.log(`- –° –ª—é–±—ã–º email: ${withAnyEmail}`);
      console.log(`- –ë–µ–∑ email –≤–æ–æ–±—â–µ: ${allEstimates.length - withAnyEmail}`);
    }
    
    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
    console.log('\nüöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º edge function —Å –ø–µ—Ä–≤—ã–º estimate...');
    
    const testPayload = {
      estimateId: estimate.id,
      sendToClient: true,
      customMessage: 'Test email check'
    };
    
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º:', testPayload);
    console.log('Email –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∑—è—Ç –∏–∑:', {
      client_email: estimate.client_email,
      email: estimate.email,
      via_client_id: estimate.client_id ? '–ú–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ client_id' : '–ù–µ—Ç client_id'
    });
    
  } catch (error) {
    console.error('–û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è email –≤ estimate –¥–ª—è —Ç–µ—Å—Ç–∞
async function addTestEmail() {
  console.log('\nüîß –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π email –≤ –ø–µ—Ä–≤—ã–π estimate...');
  
  const { data: estimate } = await window.supabase
    .from('estimates')
    .select('*')
    .limit(1)
    .single();
    
  if (estimate && !estimate.client_email) {
    const { error } = await window.supabase
      .from('estimates')
      .update({
        client_email: 'test@example.com',
        client_name: 'Test Client'
      })
      .eq('id', estimate.id);
      
    if (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
    } else {
      console.log('‚úÖ Email –¥–æ–±–∞–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É.');
    }
  } else if (estimate?.client_email) {
    console.log('‚úÖ –£ estimate —É–∂–µ –µ—Å—Ç—å email:', estimate.client_email);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
detailedEmailCheck();

// –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π email, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ:
// addTestEmail();
