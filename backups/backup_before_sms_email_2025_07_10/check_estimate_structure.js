// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã estimates –∏ —Å–≤—è–∑–µ–π —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
// –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞

async function checkEstimateStructure() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É estimates...');
  
  // 1. –ü–æ–ª—É—á–∞–µ–º estimate —Å –ø—Ä—è–º—ã–º client_id
  const { data: estimate1, error: error1 } = await window.supabase
    .from('estimates')
    .select('*')
    .not('client_id', 'is', null)
    .limit(1)
    .single();
    
  console.log('Estimate —Å client_id:', estimate1);
  
  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º ID
  if (estimate1?.client_id) {
    const { data: client, error: clientError } = await window.supabase
      .from('clients')
      .select('*')
      .eq('id', estimate1.client_id)
      .single();
      
    console.log('–ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω:', client);
    console.log('–û—à–∏–±–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞:', clientError);
  }
  
  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º estimate —á–µ—Ä–µ–∑ job
  const { data: estimate2, error: error2 } = await window.supabase
    .from('estimates')
    .select(`
      *,
      jobs!inner(
        id,
        client_id,
        clients!inner(*)
      )
    `)
    .limit(1)
    .maybeSingle();
    
  console.log('Estimate —á–µ—Ä–µ–∑ jobs:', estimate2);
  console.log('–û—à–∏–±–∫–∞ —á–µ—Ä–µ–∑ jobs:', error2);
  
  // 4. –ü–æ–ª—É—á–∞–µ–º estimate –∏ –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
  const { data: simpleEstimate } = await window.supabase
    .from('estimates')
    .select('*')
    .limit(1)
    .single();
    
  console.log('\nüìã –ü—Ä–æ—Å—Ç–æ–π estimate:', simpleEstimate);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
  if (simpleEstimate) {
    // –°–ø–æ—Å–æ–± 1: –ü—Ä—è–º–æ–π client_id
    if (simpleEstimate.client_id) {
      const { data: directClient } = await window.supabase
        .from('clients')
        .select('*')
        .eq('id', simpleEstimate.client_id)
        .single();
        
      console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ –ø—Ä—è–º–æ–º—É ID:', directClient);
    }
    
    // –°–ø–æ—Å–æ–± 2: –ß–µ—Ä–µ–∑ job
    if (simpleEstimate.job_id) {
      const { data: job } = await window.supabase
        .from('jobs')
        .select('*, clients(*)')
        .eq('id', simpleEstimate.job_id)
        .single();
        
      console.log('‚úÖ Job —Å –∫–ª–∏–µ–Ω—Ç–æ–º:', job);
    }
    
    // –°–ø–æ—Å–æ–± 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º client_name –∏ client_email –≤ —Å–∞–º–æ–º estimate
    console.log('üìß Email –≤ estimate:', simpleEstimate.client_email);
    console.log('üë§ –ò–º—è –≤ estimate:', simpleEstimate.client_name);
  }
  
  // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  console.log('\nüöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É...');
  
  if (simpleEstimate) {
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const testData = {
      estimateId: simpleEstimate.id,
      sendToClient: true,
      customMessage: 'Test from debugging script'
    };
    
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º:', testData);
    
    const { data, error } = await window.supabase.functions.invoke('send-estimate', {
      body: testData
    });
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
      
      // –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π fetch –¥–ª—è –±–æ–ª—å—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      const response = await fetch(
        `${window.supabase.supabaseUrl}/functions/v1/send-estimate`,
        {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${window.supabase.anonKey}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(testData)
        }
      );
      
      const responseText = await response.text();
      console.log('Response text:', responseText);
      
      try {
        const responseJson = JSON.parse(responseText);
        console.log('Response JSON:', responseJson);
      } catch (e) {
        console.log('Response is not JSON');
      }
    } else {
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', data);
    }
  }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü
async function checkTableStructure() {
  console.log('\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≤ estimates
  const { data: estimates } = await window.supabase
    .from('estimates')
    .select('*')
    .limit(0);
    
  console.log('–ö–æ–ª–æ–Ω–∫–∏ estimates:', Object.keys(estimates || {}));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≤ clients
  const { data: clients } = await window.supabase
    .from('clients')
    .select('*')
    .limit(0);
    
  console.log('–ö–æ–ª–æ–Ω–∫–∏ clients:', Object.keys(clients || {}));
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
checkEstimateStructure();
checkTableStructure();
