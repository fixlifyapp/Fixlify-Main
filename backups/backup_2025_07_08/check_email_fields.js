// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π email –≤ estimates/invoices
// –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ –≤ –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏

async function checkEmailFields() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è email –≤ estimates –∏ invoices...\n');
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É estimates
  const { data: estimates } = await window.supabase
    .from('estimates')
    .select('*')
    .limit(5);
    
  if (estimates && estimates.length > 0) {
    console.log('üìã –ü—Ä–∏–º–µ—Ä estimate:');
    const est = estimates[0];
    console.log({
      id: est.id,
      estimate_number: est.estimate_number,
      client_id: est.client_id,
      client_email: est.client_email,
      client_name: est.client_name,
      email: est.email,
      job_id: est.job_id
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ estimates –Ω–∞ –Ω–∞–ª–∏—á–∏–µ email
    const withEmail = estimates.filter(e => e.client_email || e.email);
    const withClientId = estimates.filter(e => e.client_id);
    const withJobId = estimates.filter(e => e.job_id);
    
    console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ estimates:`);
    console.log(`- –í—Å–µ–≥–æ: ${estimates.length}`);
    console.log(`- –° email: ${withEmail.length}`);
    console.log(`- –° client_id: ${withClientId.length}`);
    console.log(`- –° job_id: ${withJobId.length}`);
  }
  
  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É invoices
  const { data: invoices } = await window.supabase
    .from('invoices')
    .select('*')
    .limit(5);
    
  if (invoices && invoices.length > 0) {
    console.log('\nüí∞ –ü—Ä–∏–º–µ—Ä invoice:');
    const inv = invoices[0];
    console.log({
      id: inv.id,
      invoice_number: inv.invoice_number,
      client_id: inv.client_id,
      client_email: inv.client_email,
      client_name: inv.client_name,
      email: inv.email,
      job_id: inv.job_id
    });
  }
  
  // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ estimate —Å email
  console.log('\nüß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ estimate —Å email...');
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
  const { data: client } = await window.supabase
    .from('clients')
    .select('*')
    .limit(1)
    .single();
    
  if (client) {
    console.log('–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∞:', {
      id: client.id,
      name: client.name,
      email: client.email
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ edge function –Ω–∞–π—Ç–∏ —ç—Ç–æ—Ç email
    const testEstimate = {
      client_id: client.id,
      client_email: client.email,
      client_name: client.name
    };
    
    console.log('\n‚úÖ Edge function –¥–æ–ª–∂–Ω–∞ –Ω–∞–π—Ç–∏ email –≤:', testEstimate);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è email –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ estimates
async function fixMissingEmails() {
  console.log('\nüîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ email...');
  
  // –ü–æ–ª—É—á–∞–µ–º estimates –±–µ–∑ email
  const { data: estimatesNoEmail } = await window.supabase
    .from('estimates')
    .select('*, clients!estimates_client_id_fkey(*)')
    .is('client_email', null)
    .limit(10);
    
  if (estimatesNoEmail && estimatesNoEmail.length > 0) {
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${estimatesNoEmail.length} estimates –±–µ–∑ email`);
    
    for (const est of estimatesNoEmail) {
      if (est.clients?.email) {
        console.log(`–û–±–Ω–æ–≤–ª—è–µ–º estimate ${est.estimate_number} —Å email: ${est.clients.email}`);
        
        const { error } = await window.supabase
          .from('estimates')
          .update({
            client_email: est.clients.email,
            client_name: est.clients.name
          })
          .eq('id', est.id);
          
        if (error) {
          console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
        } else {
          console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ');
        }
      }
    }
  } else {
    console.log('‚úÖ –í—Å–µ estimates —É–∂–µ –∏–º–µ—é—Ç email');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
checkEmailFields();

// –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
// fixMissingEmails();
