# Supabase Secrets Configuration
# IMPORTANT: This is a TEMPLATE file. DO NOT commit actual values to Git!
# Copy this file to a secure location and fill in the actual values

## Database Credentials
SUPABASE_URL=https://mqppvcrlvsgrsqelglod.supabase.co
SUPABASE_ANON_KEY=your-anon-key-here
SUPABASE_SERVICE_ROLE_KEY=your-service-role-key-here
DATABASE_PASSWORD=your-database-password-here

## Edge Function Secrets
# Get these from: https://supabase.com/dashboard/project/mqppvcrlvsgrsqelglod/functions/secrets

### SMS/Telephony
TELNYX_API_KEY=your-telnyx-api-key-here
TELNYX_MESSAGING_PROFILE_ID=your-telnyx-profile-id-here

### Email
MAILGUN_API_KEY=your-mailgun-api-key-here
MAILGUN_DOMAIN=your-mailgun-domain-here
MAILGUN_FROM_EMAIL=your-from-email-here

### Other Services
# Add any other API keys or secrets here

## Storage Configuration
STORAGE_URL=https://mqppvcrlvsgrsqelglod.supabase.co/storage/v1

## Connection Strings
# Direct database connection
DATABASE_URL=postgresql://postgres:[PASSWORD]@db.mqppvcrlvsgrsqelglod.supabase.co:5432/postgres
# Pooler connection (for serverless environments)
POOLER_URL=postgresql://postgres:[PASSWORD]@db.mqppvcrlvsgrsqelglod.supabase.co:6543/postgres

## Instructions
1. Copy this file to a secure location outside the Git repository
2. Replace all placeholder values with actual secrets
3. Use environment-specific files (e.g., .env.production, .env.staging)
4. Never commit files with actual secrets to version control
5. Use a password manager or secure vault for storing these values

## Security Best Practices
- Rotate API keys regularly
- Use different keys for development/staging/production
- Monitor key usage in Supabase dashboard
- Revoke compromised keys immediately
- Enable 2FA on your Supabase account

## To Set Secrets in New Project
```bash
# Using Supabase CLI
supabase secrets set TELNYX_API_KEY=your-actual-key
supabase secrets set MAILGUN_API_KEY=your-actual-key
# ... repeat for all secrets
```