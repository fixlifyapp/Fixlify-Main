// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Mailgun –∏ Telnyx
// –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞

async function checkEmailSMSConfig() {
  console.clear();
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Email/SMS...\n');
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ edge functions –¥–æ—Å—Ç—É–ø–Ω—ã
  console.log('üì° –ü—Ä–æ–≤–µ—Ä—è–µ–º edge functions...');
  
  const functions = ['send-estimate', 'send-invoice', 'send-estimate-sms', 'send-invoice-sms'];
  
  for (const func of functions) {
    try {
      const url = `${window.supabase.supabaseUrl}/functions/v1/${func}`;
      const response = await fetch(url, {
        method: 'OPTIONS',
        headers: {
          'Authorization': `Bearer ${window.supabase.anonKey}`
        }
      });
      
      console.log(`${func}: ${response.status === 200 ? '‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (—Å—Ç–∞—Ç—É—Å: ' + response.status + ')'}`);
    } catch (err) {
      console.log(`${func}: ‚ùå –û—à–∏–±–∫–∞ - ${err.message}`);
    }
  }
  
  // 2. –ü–æ–ª—É—á–∞–µ–º estimate –¥–ª—è —Ç–µ—Å—Ç–∞
  console.log('\nüìã –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞...');
  
  const { data: estimate } = await window.supabase
    .from('estimates')
    .select(`
      *,
      clients!estimates_client_id_fkey(
        id,
        name,
        email,
        phone
      )
    `)
    .not('client_id', 'is', null)
    .limit(1)
    .single();
    
  if (!estimate) {
    console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω estimate —Å –∫–ª–∏–µ–Ω—Ç–æ–º');
    return;
  }
  
  const clientEmail = estimate.clients?.email || estimate.client_email;
  const clientPhone = estimate.clients?.phone || estimate.client_phone;
  
  console.log('Estimate –¥–ª—è —Ç–µ—Å—Ç–∞:', {
    number: estimate.estimate_number,
    client: estimate.clients?.name || estimate.client_name,
    email: clientEmail,
    phone: clientPhone
  });
  
  if (!clientEmail) {
    console.error('‚ùå –£ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç email! –î–æ–±–∞–≤—å—Ç–µ email –∫–ª–∏–µ–Ω—Ç—É.');
    return;
  }
  
  // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É email —á–µ—Ä–µ–∑ Mailgun
  console.log('\nüìß –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É Email (Mailgun)...');
  
  try {
    const { data, error } = await window.supabase.functions.invoke('send-estimate', {
      body: {
        estimateId: estimate.id,
        sendToClient: true,
        customMessage: '–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Mailgun'
      }
    });
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error);
      
      // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
      if (error.message?.includes('MAILGUN_API_KEY')) {
        console.error('üîë –ü—Ä–æ–±–ª–µ–º–∞ —Å Mailgun API –∫–ª—é—á–æ–º');
        console.log('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ Supabase Dashboard > Edge Functions > Secrets');
      } else if (error.message?.includes('Client email not found')) {
        console.error('üìß Email –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        console.log('–ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å email –≤ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ estimate');
      } else if (error.message?.includes('Failed to send email')) {
        console.error('üìÆ Mailgun –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å');
        console.log('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–º–µ–Ω –∏ API –∫–ª—é—á Mailgun');
      }
    } else {
      console.log('‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!', data);
    }
  } catch (err) {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
  }
  
  // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É SMS —á–µ—Ä–µ–∑ Telnyx (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω)
  if (clientPhone) {
    console.log('\nüì± –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É SMS (Telnyx)...');
    
    try {
      const { data, error } = await window.supabase.functions.invoke('send-estimate-sms', {
        body: {
          estimateId: estimate.id,
          sendToClient: true,
          recipientPhone: clientPhone,
          customMessage: '–¢–µ—Å—Ç SMS —á–µ—Ä–µ–∑ Telnyx'
        }
      });
      
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ SMS:', error);
        
        if (error.message?.includes('TELNYX_API_KEY')) {
          console.error('üîë –ü—Ä–æ–±–ª–µ–º–∞ —Å Telnyx API –∫–ª—é—á–æ–º');
        } else if (error.message?.includes('phone number')) {
          console.error('üì± –ü—Ä–æ–±–ª–µ–º–∞ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
        }
      } else {
        console.log('‚úÖ SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!', data);
      }
    } catch (err) {
      console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ SMS:', err);
    }
  } else {
    console.log('\nüì± –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç SMS - —É –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
  }
  
  // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π
  console.log('\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –æ—Ç–ø—Ä–∞–≤–æ–∫...');
  
  const { data: communications } = await window.supabase
    .from('estimate_communications')
    .select('*')
    .eq('estimate_id', estimate.id)
    .order('created_at', { ascending: false })
    .limit(5);
    
  if (communications && communications.length > 0) {
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${communications.length} –∑–∞–ø–∏—Å–µ–π –æ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è—Ö:`);
    communications.forEach((comm, i) => {
      console.log(`${i + 1}. ${comm.communication_type} - ${comm.status} - ${new Date(comm.created_at).toLocaleString()}`);
    });
  } else {
    console.log('–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è—Ö –¥–ª—è —ç—Ç–æ–≥–æ estimate');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è email –∫–ª–∏–µ–Ω—Ç—É
async function addEmailToClient(clientId, email) {
  const { error } = await window.supabase
    .from('clients')
    .update({ email: email })
    .eq('id', clientId);
    
  if (error) {
    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è email:', error);
  } else {
    console.log('‚úÖ Email –¥–æ–±–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É!');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkEmailSMSConfig();

// –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å email –∫–ª–∏–µ–Ω—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
// addEmailToClient('client-id-here', 'client@example.com');
