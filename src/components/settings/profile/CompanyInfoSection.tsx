import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { toast } from "sonner";
import { Save, Info, RefreshCw, Globe, Clock } from "lucide-react";
import { useState, useEffect } from "react";
import { formatCompanyNameForEmail, generateFromEmail } from "@/utils/emailUtils";
import { TIMEZONES, DEFAULT_TIMEZONE, getTimezonesGrouped, getCurrentTimeInTimezone } from "@/utils/timezones";

interface CompanyInfoSectionProps {
  companySettings: any;
  updateCompanySettings: (updates: any) => void;
  isEditing?: boolean;
}

export const CompanyInfoSection = ({ companySettings, updateCompanySettings, isEditing = true }: CompanyInfoSectionProps) => {
  const [localSettings, setLocalSettings] = useState(companySettings);
  const [hasChanges, setHasChanges] = useState(false);
  const [isSaving, setIsSaving] = useState(false);

  // Update local settings when companySettings changes
  useEffect(() => {
    console.log('CompanyInfoSection - Received company settings:', companySettings);
    setLocalSettings(companySettings);
    setHasChanges(false);
  }, [companySettings]);

  const handleFieldChange = (field: string, value: string) => {
    console.log(`CompanyInfoSection - Field changed: ${field} = "${value}"`);
    setLocalSettings(prev => ({ ...prev, [field]: value }));
    setHasChanges(true);
  };

  const handleSave = async () => {
    if (!hasChanges) return;
    
    setIsSaving(true);
    try {
      console.log('CompanyInfoSection - Saving company info with data:', localSettings);
      console.log('CompanyInfoSection - Company name being saved:', localSettings.company_name);
      
      await updateCompanySettings(localSettings);
      setHasChanges(false);
      toast.success('Company information saved successfully');
      
      console.log('CompanyInfoSection - Save completed successfully');
    } catch (error) {
      console.error('CompanyInfoSection - Error saving company settings:', error);
      toast.error('Failed to save company information');
    } finally {
      setIsSaving(false);
    }
  };

  const handleCancel = () => {
    console.log('CompanyInfoSection - Canceling changes, reverting to:', companySettings);
    setLocalSettings(companySettings);
    setHasChanges(false);
  };

  // Get the auto-generated email address
  const getAutoGeneratedEmail = () => {
    const companyName = localSettings.company_name || '';
    if (!companyName.trim()) {
      return 'support@fixlify.app';
    }
    return generateFromEmail(companyName);
  };

  const getFormattedName = () => {
    const companyName = localSettings.company_name || '';
    if (!companyName.trim()) {
      return 'support';
    }
    return formatCompanyNameForEmail(companyName);
  };

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-medium">Company Information</h3>
        {hasChanges && (
          <div className="flex gap-2">
            <Button 
              variant="outline" 
              size="sm" 
              onClick={handleCancel}
              disabled={isSaving}
            >
              Cancel
            </Button>
            <Button 
              size="sm" 
              onClick={handleSave}
              disabled={isSaving}
              className="bg-fixlyfy hover:bg-fixlyfy/90"
            >
              {isSaving ? (
                <>
                  <RefreshCw className="h-4 w-4 mr-1 animate-spin" />
                  Saving...
                </>
              ) : (
                <>
                  <Save className="h-4 w-4 mr-1" />
                  Save Changes
                </>
              )}
            </Button>
          </div>
        )}
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="space-y-2">
          <Label htmlFor="company-name">Company Name *</Label>
          <Input
            id="company-name"
            value={localSettings.company_name || ''}
            onChange={(e) => handleFieldChange('company_name', e.target.value)}
            disabled={!isEditing}
            placeholder="Enter your company name"
            className={hasChanges ? 'border-blue-500' : ''}
            required
          />
          <p className="text-xs text-muted-foreground">
            This will be used to generate your email address automatically
          </p>
        </div>

        {/* Auto-Generated Email Section */}
        <div className="space-y-2 md:col-span-2">
          <Label>Auto-Generated Email Address</Label>
          <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
            <div className="flex items-start gap-3">
              <Info className="h-5 w-5 text-blue-600 mt-0.5" />
              <div className="flex-1">
                <h4 className="font-medium text-blue-800">Automatic Email Generation</h4>
                <div className="mt-2 space-y-2">
                  <p className="text-sm text-blue-700">
                    Based on your company name, your email will be:
                  </p>
                  <div className="flex items-center gap-2">
                    <span className="text-sm text-blue-700">Email address:</span>
                    <Badge variant="secondary" className="bg-green-50 text-green-700">
                      {getAutoGeneratedEmail()}
                    </Badge>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div className="space-y-2 md:col-span-2">
          <Label htmlFor="company-address">Address</Label>
          <Input
            id="company-address"
            value={localSettings.company_address || ''}
            onChange={(e) => handleFieldChange('company_address', e.target.value)}
            disabled={!isEditing}
            placeholder="123 Business Park, Suite 456"
          />
        </div>
        <div className="space-y-2">
          <Label htmlFor="company-city">City</Label>
          <Input 
            id="company-city" 
            value={localSettings.company_city || ''}
            onChange={(e) => handleFieldChange('company_city', e.target.value)}
            disabled={!isEditing}
            placeholder="San Francisco"
          />
        </div>
        <div className="space-y-2">
          <Label htmlFor="company-state">State</Label>
          <Input 
            id="company-state" 
            value={localSettings.company_state || ''}
            onChange={(e) => handleFieldChange('company_state', e.target.value)}
            disabled={!isEditing}
            placeholder="California"
          />
        </div>
        <div className="space-y-2">
          <Label htmlFor="company-zip">ZIP Code</Label>
          <Input 
            id="company-zip" 
            value={localSettings.company_zip || ''}
            onChange={(e) => handleFieldChange('company_zip', e.target.value)}
            disabled={!isEditing}
            placeholder="94103"
          />
        </div>
        <div className="space-y-2">
          <Label htmlFor="company-country">Country</Label>
          <Input 
            id="company-country" 
            value={localSettings.company_country || ''}
            onChange={(e) => handleFieldChange('company_country', e.target.value)}
            disabled={!isEditing}
            placeholder="United States"
          />
        </div>
        <div className="space-y-2">
          <Label htmlFor="company-website">Website</Label>
          <Input 
            id="company-website" 
            value={localSettings.company_website || ''}
            onChange={(e) => handleFieldChange('company_website', e.target.value)}
            disabled={!isEditing}
            placeholder="https://www.yourcompany.com"
          />
        </div>
        <div className="space-y-2">
          <Label htmlFor="company-email">Main Business Email</Label>
          <Input 
            id="company-email" 
            type="email"
            value={localSettings.company_email || ''}
            onChange={(e) => handleFieldChange('company_email', e.target.value)}
            disabled={!isEditing}
            placeholder="contact@yourcompany.com"
          />
        </div>
        <div className="space-y-2">
          <Label htmlFor="tax-id">Tax ID / EIN</Label>
          <Input 
            id="tax-id" 
            value={localSettings.tax_id || ''}
            onChange={(e) => handleFieldChange('tax_id', e.target.value)}
            disabled={!isEditing}
            placeholder="XX-XXXXXXX"
          />
        </div>
        <div className="space-y-2">
          <Label htmlFor="company-phone">Owner Phone Number</Label>
          <Input 
            id="company-phone" 
            value={localSettings.company_phone || ''}
            onChange={(e) => handleFieldChange('company_phone', e.target.value)}
            disabled={!isEditing}
            placeholder="(555) 123-4567"
          />
          <p className="text-xs text-muted-foreground">
            Your personal contact number. Business phone numbers are managed in Phone Numbers section.
          </p>
        </div>
        
        {/* Timezone Selection */}
        <div className="space-y-2 md:col-span-2">
          <Label htmlFor="company-timezone">
            <div className="flex items-center gap-2">
              <Globe className="h-4 w-4" />
              Business Timezone
            </div>
          </Label>
          <Select
            value={localSettings.company_timezone || DEFAULT_TIMEZONE}
            onValueChange={(value) => handleFieldChange('company_timezone', value)}
            disabled={!isEditing}
          >
            <SelectTrigger className={hasChanges ? 'border-blue-500' : ''}>
              <SelectValue placeholder="Select timezone" />
            </SelectTrigger>
            <SelectContent>
              {Object.entries(getTimezonesGrouped()).map(([group, timezones]) => (
                <div key={group}>
                  <div className="px-2 py-1.5 text-sm font-semibold text-muted-foreground">
                    {group}
                  </div>
                  {timezones.map((tz) => (
                    <SelectItem key={tz.value} value={tz.value}>
                      <div className="flex items-center justify-between w-full">
                        <span>{tz.label}</span>
                        <span className="text-xs text-muted-foreground ml-2">
                          UTC{tz.offset}
                        </span>
                      </div>
                    </SelectItem>
                  ))}
                </div>
              ))}
            </SelectContent>
          </Select>
          {localSettings.company_timezone && (
            <div className="flex items-center gap-2 text-sm text-muted-foreground">
              <Clock className="h-3 w-3" />
              Current time: {getCurrentTimeInTimezone(localSettings.company_timezone || DEFAULT_TIMEZONE)}
            </div>
          )}
          <p className="text-xs text-muted-foreground">
            This timezone will be used as the default for all business operations and automation scheduling
          </p>
        </div>
      </div>
    </div>
  );
};
