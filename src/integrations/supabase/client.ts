// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://mqppvcrlvsgrsqelglod.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1xcHB2Y3JsdnNncnNxZWxnbG9kIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc1OTE3MDUsImV4cCI6MjA2MzE2NzcwNX0.My-KiqG1bCMqzUru4m59d4v18N3WGxNoNtFPOFAmhzg";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

const supabaseClient = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  },
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  }
});

// Override the channel method to prevent sms_messages subscriptions
const originalChannel = supabaseClient.channel.bind(supabaseClient);
supabaseClient.channel = function(name: string, opts?: any) {
  // Only block SMS-specific channels, not all messages
  if (name.includes('sms') && !name.includes('email')) {
    console.log('Blocked SMS realtime subscription for:', name);
    // Return a mock channel that does nothing
    const mockChannel = {
      on: () => mockChannel,
      subscribe: () => ({ status: 'SUBSCRIBED' }),
      unsubscribe: () => {},
      presenceState: () => ({}),
      track: () => {},
      untrack: () => {}
    } as any;
    return mockChannel;
  }
  return originalChannel(name, opts);
};

// Override removeChannel to prevent errors
const originalRemoveChannel = supabaseClient.removeChannel.bind(supabaseClient);
supabaseClient.removeChannel = function(channel: any) {
  try {
    // Check if channel has unsubscribe method and is valid
    if (channel && typeof channel.unsubscribe === 'function') {
      channel.unsubscribe();
    }
    return originalRemoveChannel(channel);
  } catch (error) {
    console.log('Suppressed removeChannel error:', error);
    return Promise.resolve();
  }
};

export const supabase = supabaseClient;